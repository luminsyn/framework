package ${package.Controller};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.validation.annotation.Validated;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import ${basePackage}.dto.${entity}InsertDto;
import ${basePackage}.dto.${entity}UpdateDto;
import ${basePackage}.dto.${entity}SelectDto;
import ${basePackage}.vo.${entity}Vo;
import java.io.Serializable;
#if(${returnResultClass})
import ${returnResultClassPackage};
#end
#if(${springdoc})
import io.swagger.v3.oas.annotations.tags.tag;
import io.swagger.v3.oas.annotations.*;
#elseif(${swagger})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiModelProperty;
#end
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
#if(${pageByDto})
import com.baomidou.mybatisplus.core.metadata.IPage;
#end

/**
 * $!{table.comment} 接口
 *
 * @author ${author}
 * @since ${date}
 */
#if(${springdoc})
@Tag(name = "${table.comment}接口", description = "$!{table.comment}")
#elseif(${swagger})
@Api(value = "#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end", tags = "$!{table.comment}接口")
#end
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    private ${table.serviceName} baseService;

    #if(${springdoc})
    @Operation(summary = "新增")
    #elseif(${swagger})
    @ApiOperation(value = "新增")
    #else
    /**
     * 新增
     * @author ${author}
     * @date ${nowTime}
     * @param dto 新增入参对象
     * @return
     */
    #end
    @PostMapping("/insertByDto")
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<${entity}>#end insertByDto(@RequestBody @Validated ${entity}InsertDto dto){
    #else
    public Object insertByDto(@RequestBody @Validated ${entity}InsertDto dto){
    #end
        ${entity} result = baseService.insertByDto(dto);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return null;
    #end
    }

    #if(${springdoc})
    @Operation(summary = "修改")
    #elseif(${swagger})
    @ApiOperation(value = "修改")
    #else
    /**
     * 修改
     * @author ${author}
     * @date ${nowTime}
     * @param dto 修改入参对象
     * @return
     */
    #end
    @PutMapping("/updateByDto")
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<Boolean>#end updateById(@RequestBody @Validated ${entity}UpdateDto dto){
    #else
    public Object updateById(@RequestBody @Validated ${entity}UpdateDto dto){
    #end
        Boolean result = baseService.updateByDto(dto);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return null;
    #end
    }

    #if(${springdoc})
    @Operation(summary = "删除")
    #elseif(${swagger})
    @ApiOperation(value = "删除")
    #else
    /**
     * 删除
     * @author ${author}
     * @date ${nowTime}
     * @param id 主键ID|1
     * @return
     */
    #end
    @DeleteMapping("/removeById/{id}")
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<Boolean>#end removeById(@PathVariable Serializable id) {
    #else
    public Object removeById(@PathVariable Serializable id) {
    #end
        Boolean result = baseService.removeById(id);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return null;
    #end
    }

    #if(${pageByDto})
    #if(${springdoc})
    @Operation(summary = "根据id查询详情")
    #elseif(${swagger})
    @ApiOperation(value = "根据id查询详情")
    #else
    /**
     * 根据id查询详情
     * @author ${author}
     * @date ${nowTime}
     * @param id 主键id
     * @return
     */
    #end
    @GetMapping("/getVoById/{id}")
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<${entity}Vo>#end getVoById(@PathVariable Serializable id){
    #else
    public Object getVoById(@PathVariable Serializable id){
    #end
        ${entity}Vo result = baseService.getVoById(id);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return null;
    #end
    }

    #if(${springdoc})
    @Operation(summary = "分页查询")
    #elseif(${swagger})
    @ApiOperation(value = "分页查询")
    #else
    /**
     * 分页查询
     * @author ${author}
     * @date ${nowTime}
     * @param dto 查询条件dto
     * @return
     */
    #end
    @PostMapping("/pageByDto")
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<IPage<${entity}Vo>>#end pageByDto(@RequestBody ${entity}SelectDto dto){
    #else
    public Object pageByDto(@RequestBody ${entity}SelectDto dto){
    #end
        IPage<${entity}Vo> result=baseService.pageByDto(dto);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return null;
    #end
    }

    #if(${exportExcel})
    #if(${springdoc})
    @Operation(summary = "导出excel表格")
    #elseif(${swagger})
    @ApiOperation(value = "导出excel表格")
    #else
    /**
     * 导出excel表格
     * @author ${author}
     * @date ${nowTime}
     * @param dto 查询条件dto
     * @return
     */
    #end
    @PostMapping("/exportExcel")
    public void exportExcel(@RequestBody ${entity}SelectDto dto){
        baseService.exportExcel(dto);
    }
    #end
    #end



}
#end
