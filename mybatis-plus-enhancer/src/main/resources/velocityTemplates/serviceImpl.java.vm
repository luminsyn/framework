package ${package.ServiceImpl};

#if(${generateImport}||${generateExport})
import com.alibaba.excel.EasyExcel;
import com.alibaba.excel.write.builder.ExcelWriterBuilder;
import com.alibaba.excel.write.style.column.LongestMatchColumnWidthStyleStrategy;
#end
#if(${generateSelect})
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
#end
import ${superServiceImplClassPackage};
import ${package.Service}.${table.serviceName};
import ${package.Mapper}.${table.mapperName};
import ${package.Entity}.${entity};
#if(${generateSelect}||${generateInsert})
import ${basePackage}.${VOPackage}.${entity}VO;
#end
import org.springframework.stereotype.Service;
#if(${generateInsert}||${generateUpdate})
import org.springframework.beans.BeanUtils;
#end

#if(${generateSelect}||${generateDelete})
import java.io.Serializable;
#end
#if(${generateImport}||${generateExport})
import java.io.InputStream;
import java.io.OutputStream;
import java.util.stream.Collectors;
#end
import java.util.*;
#if(${generateSelect}||${generateExport})
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
#end

/**
 * $!{table.comment} 服务实现类
 *
 * @author ${author}
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>() implements ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {
    #if(${generateSelect}||${generateExport})

    public Map<?, ?> toMap(Object source) {
        if (source==null) return null;if (source instanceof Map) return (Map<?, ?>) source;
        Map<Object, Object> map = new HashMap<>();
        List<Field> fields = new ArrayList<>();
        Class<?> currentClass = source.getClass();
        while (currentClass != null && currentClass != Object.class && !currentClass.isInterface()) {
            Arrays.stream(currentClass.getDeclaredFields()).filter(f -> !Modifier.isStatic(f.getModifiers()))
                    .filter(f -> !Modifier.isFinal(f.getModifiers())).filter(f -> !Modifier.isNative(f.getModifiers()))
                    .peek(f -> f.setAccessible(true)).forEach(fields::add);
            currentClass = currentClass.getSuperclass();
        }
        try {
            for (Field field : fields) {
                Object key = field.getName();
                Object value = field.get(source);
                if (value != null) map.put(key, value);
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return map;
    }

    public <S> List<${entity}VO> doSelect(S s, IPage<${entity}VO> page) {
        return getBaseMapper().listByDTO(toMap(s), null);
    }

    #end
    #if(${generateInsert})

    @Override
    public <S> ${entity}VO insertByDTO(S s) {
        ${entity} entity = new ${entity}();
        BeanUtils.copyProperties(s, entity);
        super.save(entity);
        ${entity}VO vo = new ${entity}VO();
        BeanUtils.copyProperties(entity, vo);
        return vo;
    }
    #end
    #if(${generateUpdate})

    @Override
    public <S> boolean updateByDTO(S s) {
        ${entity} entity = new ${entity}();
        BeanUtils.copyProperties(s, entity);
        return super.updateById(entity);
    }
    #end
    #if(${generateDelete})

    @Override
    public boolean removeById(Serializable id) {
        return super.removeById(id);
    }
    #end
    #if(${generateSelect})

    @Override
    public ${entity}VO voById(Serializable id) {
        HashMap<String, Object> map = new HashMap<>();
        map.put("id", id);
        return this.oneByDTO(map);
    }

    @Override
    public <S> ${entity}VO oneByDTO(S s) {
        List<${entity}VO> vs = listByDTO(s);
        if (vs == null || vs.size()==0 ) return null;
        if(vs.size() > 1) throw new RuntimeException("error query => required 1 but found " + vs.size());
        return vs.get(0);
    }

    @Override
    public <S> List<${entity}VO> listByDTO(S s) {
        return doSelect(s, page);
    }

    @Override
    public <S> IPage<${entity}VO> pageByDTO(S s, Long current, Long size) {
        if (current == null || current < 1) current = 1L;
        if (size == null) size = 10L;
        Page<${entity}VO> page = new Page<>(current, size);
        List<${entity}VO> voList = doSelect(s, page);
        page.setRecords(voList);
        return page;
    }
    #end
    #if(${generateExport})

    @Override
    public <S,U> void exportExcel(S s, OutputStream os, Class<U> clazz, Long current, Long size, String... includeFields) {
        List<${entity}VO> voList;
        if (current == null && size == null) {
            voList = listByDTO(s);
        } else {
            voList = pageByDTO(s, current, size).getRecords();
        }
        ExcelWriterBuilder builder = EasyExcel.write(os, clazz);
        if (includeFields != null && includeFields.length > 0) {
            builder.includeColumnFieldNames(Arrays.asList(includeFields));
        }
        builder.registerWriteHandler(new LongestMatchColumnWidthStyleStrategy()).sheet().doWrite(voList);
    }
    #end
    #if(${generateImport})

    @Override
    public <U> boolean importExcel(InputStream is, Class<U> clazz) {
        List<U> cachedDataList = EasyExcel.read(is).head(clazz).sheet().doReadSync();
        List<${entity}> entityList = cachedDataList.stream().map(e->{
                ${entity} entity = new ${entity}();
                BeanUtils.copyProperties(e, entity);
                return entity;
            }).collect(Collectors.toList());
        return super.saveBatch(entityList);
    }

    @Override
    public <U> void excelTemplate(OutputStream os, Class<U> clazz) {
        EasyExcel.write(os, clazz).registerWriteHandler(new LongestMatchColumnWidthStyleStrategy()).sheet().doWrite(Collections.emptyList());
    }
    #end
    
}
#end
