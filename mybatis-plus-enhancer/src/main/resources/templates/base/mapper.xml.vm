<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${package.Mapper}.${table.mapperName}">
#if(${enableCache})

    <!-- 开启二级缓存 -->
    <cache type="${cacheClassName}"/>
#end
#if(${baseResultMap})

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="${package.Entity}.${entity}">
        #foreach($field in ${table.fields})##生成主键排在第一位
            #if(${field.keyFlag})
                <id column="${field.name}" property="${field.propertyName}" />
            #end
        #end
        #foreach($field in ${table.commonFields})##生成公共字段
            <result column="${field.name}" property="${field.propertyName}" />
        #end
        #foreach($field in ${table.fields})##生成普通字段
            #if(!${field.keyFlag})
                <result column="${field.name}" property="${field.propertyName}" />
            #end
        #end
    </resultMap>

    <resultMap id="BaseResultMap4VO" type="${basePackage}.${package4VO}.${entity}VO">
        #foreach($field in ${table.fields})
            #if(${field.keyFlag})##生成主键排在第一位
                <id column="${field.name}" property="${field.propertyName}" />
            #end
        #end
        #foreach($field in ${table.commonFields})##生成公共字段
            <result column="${field.name}" property="${field.propertyName}" />
        #end
        #foreach($field in ${table.fields})
            #if(!${field.keyFlag})##生成普通字段
                <result column="${field.name}" property="${field.propertyName}" />
            #end
        #end
    </resultMap>
#end
#if(${baseColumnList})

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        #foreach($field in ${table.commonFields})
            ${field.columnName},
        #end
        ${table.fieldNames}
    </sql>
#end

    <select id="listByDTO"#if(${resultMapForVO}) resultMap="BaseResultMap4VO"#else resultType="${basePackage}.${package4VO}.${entity}VO"#end>
        SELECT
        a.*
        FROM
##         ${schemaName} ${table.name} a
        ${table.name} a
        <where>
##   todo 逻辑删除字段支持所有数据类型，
## 但推荐使用 Integer、Boolean 或 LocalDateTime。
## 如果使用 datetime 类型，可以配置逻辑未删除值为 null(长度为4的字符串,在yaml中需使用转义符(单引号)包裹)，
## 已删除值可以使用函数如 now() 来获取当前时间。
## 如果使用 bigint 类型，可以配置逻辑未删除值为 0，
## 已删除值可以使用函数如 UNIX_TIMESTAMP() 来获取当前时间戳作为删除标识。
## 适合用于将删除字段作为唯一索引组成列,可以多次逻辑删除
            #foreach($field in ${table.fields})
                #if(${field.logicDeleteField})
            a.${field.columnName} = 0
                    #break
                #end
            #end
            <if test="param1 != null">
#foreach($field in ${table.fields})
    #if(${field.logicDeleteField})
    #else
                <if test="param1.${field.propertyName} != null">
                    AND a.${field.columnName} = #{param1.${field.propertyName}}
                </if>
        #if(${extraFieldSuffixMap})## ----------额外字段foreach-----------start
            #foreach($entry in ${extraFieldSuffixMap.entrySet()})
                #set($key = $entry.key)
                #set($value = $entry.value)
                #set($extraFieldName= "${field.propertyName}${key}")
                    #if(!$table.fields.contains("${extraFieldName}"))##-----属性字段不包含额外字段-----start
                #if(${value}=="IN"||${value}=="NOT IN")
                <if test="param1.${extraFieldName} != null and param1.${extraFieldName}.size()>0">
                    AND a.${field.columnName} ${value}
                    <foreach collection="param1.${extraFieldName}" open="("  close=")" separator="," item="val">
                        #{val}
                    </foreach>
                </if>
                #elseif(${value}=="LIKE"||${value}=="NOT LIKE")
                    #if(${field.propertyType}=="String")
                <if test="param1.${extraFieldName} != null and param1.${extraFieldName}.length()>0">
                    AND a.${field.columnName} ${value} '%' || #{param1.${extraFieldName}} || '%'
                </if>
                    #end
                #elseif(${value}=="<")
                <if test="param1.${extraFieldName} != null">
                    AND a.${field.columnName} &lt;= #{param1.${extraFieldName}}
                </if>
                #elseif(${value}=="<=")
                <if test="param1.${extraFieldName} != null">
                    AND a.${field.columnName} &lt;= #{param1.${extraFieldName}}
                </if>
                #elseif(${value}=="IS NULL"||${value}=="IS NOT NULL")
                <if test="param1.${extraFieldName} != null">
                    AND a.${field.columnName} ${value}
                </if>
                #else
                <if test="param1.${extraFieldName} != null">
                    AND a.${field.columnName} ${value} #{param1.${extraFieldName}}
                </if>
                #end
                    #end##-----属性字段不包含额外字段-----end
            #end## ----------额外字段foreach-----------end
        #end
    #end
#end
## ----------  END 字段循环遍历  ----------
            </if>
        </where>
        #if(${orderBySql})
        ORDER BY ${orderBySql}
        #end
    </select>


</mapper>
