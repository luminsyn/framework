<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${package.Mapper}.${table.mapperName}">
#if(${enableCache})

    <!-- 开启二级缓存 -->
    <cache type="${cacheClassName}"/>
#end

    <sql id="selectFragment">
        <if test="param1 != null">
            <foreach collection="param1" item="gen">
                <if test="gen.conditions != null and gen.conditions.size() > 0">
                    <trim prefix="AND ( " suffix=" )" prefixOverrides="AND|OR" suffixOverrides="AND|OR">
                        <foreach collection="gen.conditions" item="item">
                            <choose>
                                <when test="item.isOr()">
                                    OR
                                </when>
                                <otherwise>
                                    AND
                                </otherwise>
                            </choose>
                            <choose>
                                <when test="item.operator=='IN' or item.operator=='NOT IN'">
                                    ${item.field} ${item.operator}
                                    <foreach collection="item.value" item="val" separator="," open="(" close=")">
                                        #{val}
                                    </foreach>
                                </when>
                                <when test="item.operator=='IS NULL' or item.operator=='IS NOT NULL'">
                                    ${item.field} ${item.operator}
                                </when>
                                <otherwise>
                                    ${item.field} ${item.operator} #{item.value}
                                </otherwise>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </if>
    </sql>

    <sql id="sortFragment">
        <if test="param1 != null and param1.sorts != null and param1.sorts.size() > 0">
            <foreach collection="param1.sorts" item="item" separator="," close=",">
                ${item.field}
                <if test="item.isDesc()">
                    DESC
                </if>
            </foreach>
        </if>
    </sql>
#if(${baseResultMap})

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="${package.Entity}.${entity}">
    #foreach($field in ${table.fields})##生成主键排在第一位
        #if(${field.keyFlag})
        <id column="${field.name}" property="${field.propertyName}" />
        #end
    #end
    #foreach($field in ${table.commonFields})##生成公共字段
        <result column="${field.name}" property="${field.propertyName}" />
    #end
    #foreach($field in ${table.fields})##生成普通字段
        #if(!${field.keyFlag})
        <result column="${field.name}" property="${field.propertyName}" />
        #end
    #end
    </resultMap>

    <resultMap id="BaseResultMap4VO" type="${basePackage}.${package4VO}.${entity}VO">
    #foreach($field in ${table.fields})##生成主键排在第一位
        #if(${field.keyFlag})
        <id column="${field.name}" property="${field.propertyName}" />
        #end
    #end
    #foreach($field in ${table.commonFields})##生成公共字段
        <result column="${field.name}" property="${field.propertyName}" />
    #end
    #foreach($field in ${table.fields})##生成普通字段
        #if(!${field.keyFlag})
        <result column="${field.name}" property="${field.propertyName}" />
        #end
    #end
    </resultMap>
#end
#if(${baseColumnList})

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        #foreach($field in ${table.commonFields})
        ${field.columnName},
        #end
        ${table.fieldNames}
    </sql>
#end

    <select id="listByDTO"#if(${resultMapForVO}) resultMap="BaseResultMap4VO"#else resultType="${basePackage}.${package4VO}.${entity}VO"#end>
        SELECT
        a.*
        FROM
##         ${schemaName} ${table.name} a
        ${table.name} a
        <where>
## 逻辑删除字段支持所有数据类型，
## 但推荐使用 Integer、Boolean 或 LocalDateTime。
## 如果使用 datetime 类型，可以配置逻辑未删除值为 null(长度为4的字符串,在yaml中需使用转义符(单引号)包裹)，
## 已删除值可以使用函数如 now() 来获取当前时间。
## 如果使用 bigint 类型，可以配置逻辑未删除值为 0，
## 已删除值可以使用函数如 UNIX_TIMESTAMP() 来获取当前时间戳作为删除标识。
## 适合用于将删除字段作为唯一索引组成列,可以多次逻辑删除
            #foreach($field in ${table.fields})
                #if(${field.logicDeleteField})
                    #if(${field.metaInfo.defaultValue})
            a.${field.columnName} = ${field.metaInfo.defaultValue}
                    #else
            a.${field.columnName} IS NULL
                    #end
                    #break
                #end
            #end
            <include refid="selectFragment"/>
            <if test="param1.map != null">
            </if>
        </where>
        <trim prefix="ORDER BY" suffixOverrides=",">
            <include refid="sortFragment"/>
            $!{orderBySql}
        </trim>
    </select>

</mapper>
