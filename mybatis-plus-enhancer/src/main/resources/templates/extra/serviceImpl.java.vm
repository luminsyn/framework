package ${package.ServiceImpl};

## ------参数设置----start
#set($entityInsertDTO = "${entity}InsertDTO")
#set($entityUpdateDTO = "${entity}UpdateDTO")
#set($entityVO = "${entity}VO")
###if(${selectDTO.classFullName})
##import ${selectDTO.classFullName};
##    #set($entitySelectDTO = ${selectDTO.clazz("${entity}")})
###else
##import ${basePackage}.${package4DTO}.${entity}SelectDTO;
##    #set($entitySelectDTO = "${entity}SelectDTO")
###end
## ------参数设置----end
#if(${overrideMethods}&&${generateSelect})
import com.baomidou.mybatisplus.core.metadata.IPage;
#end
import ${superServiceImplClassPackage};
#if(${extraFieldSuffixCustom})
import io.github.bootystar.mybatisplus.enhance.builder.FieldSuffixBuilder;
#end
import ${package.Entity}.${entity};
import ${basePackage}.${package4VO}.${entityVO};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import org.springframework.stereotype.Service;

#if(${overrideMethods})
import java.util.List;
#if(${generateDelete}||${generateSelect})
import java.io.Serializable;
#end
#if(${generateImport})
import java.io.InputStream;
#end
#if(${generateExport})
import java.io.OutputStream;
#end
#end

/**
 * $!{table.comment} 服务实现类
 *
 * @author ${author}
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}, ${entityVO}>() implements ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity} ,${entityVO}> implements ${table.serviceName} {
#if(${extraFieldSuffixCustom})

    @Override
    protected FieldSuffixBuilder initSuffixBuilder() {
        return new FieldSuffixBuilder()
                #foreach($entry in ${extraFieldSuffixMap.entrySet()})
                    #set($key = $entry.key)
                    #set($value = $entry.value)
                        #if(${value}=="!=")
                            .ne("${key}")
                        #elseif(${value}==">")
                            .gt("${key}")
                        #elseif(${value}==">=")
                            .ge("${key}")
                        #elseif(${value}=="<")
                            .lt("${key}")
                        #elseif(${value}=="<=")
                            .le("${key}")
                        #elseif(${value}=="LIKE")
                            .like("${key}")
                        #elseif(${value}=="NOT LIKE")
                            .notLike("${key}")
                        #elseif(${value}=="IS NULL")
                            .isNull("${key}")
                        #elseif(${value}=="IS NOT NULL")
                            .isNotNull("${key}")
                        #elseif(${value}=="IN")
                            .in("${key}")
                        #elseif(${value}=="NOT IN")
                            .notIn("${key}")
                        #end
                #end
            ;
    }
#end
#if(${overrideMethods})
    #if(${generateInsert})

    @Override
    public <S, R> R insertByDTO(S s) {
//        ${entityInsertDTO} dto = (${entityInsertDTO}) s;
        return super.insertByDTO(s);
    }
    #end
    #if(${generateUpdate})

    @Override
    public <S> boolean updateByDTO(S s) {
//        ${entityUpdateDTO} dto = (${entityUpdateDTO}) s;
        return super.updateByDTO(s);
    }
    #end
    #if(${generateDelete})

    @Override
    public boolean removeById(Serializable id) {
        return super.removeById(id);
    }
    #end

##    @Override
##    public <S> List<${entityVO}> doSelect(S s, IPage<${entityVO}> page) {
####        #if(${entitySelectDTO})
####//        ${entitySelectDTO} dto = (${entitySelectDTO}) s;
####        #end
##        return super.doSelect(s, page);
##        #end
##    }
    #if(${generateSelect})

    @Override
    public ${entityVO} oneById(Serializable id) {
        return super.oneById(id);
    }

    @Override
    public <S> List<${entityVO}> listByDTO(S s) {
        return super.listByDTO(s);
    }

    @Override
    public <S> IPage<${entityVO}> pageByDTO(S s, Long current, Long size) {
        return super.pageByDTO(s, current, size);
    }
    #end
    #if(${generateImport})

    @Override
    public <U> int excelImport(InputStream is, Class<U> clazz) {
//        ${entityInsertDTO} dto = (${entityInsertDTO}) s;
        return super.excelImport(is, clazz);
    }
    #end
    #if(${generateExport})

    @Override
    public <S,U> void excelExport(S s, OutputStream os, Class<U> clazz, Long current, Long size, String... includeFields) {
        super.excelExport(s, os, clazz, current, size, includeFields);
    }
    #end

#end

}
#end
