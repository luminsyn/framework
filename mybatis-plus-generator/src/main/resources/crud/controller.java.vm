package ${package.Controller};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
#if(${importExcel})
import org.springframework.web.multipart.MultipartFile;
import ${basePackage}.${voPackage}.${entity}ImportVo;
import ${basePackage}.${listenerPackage}.${entity}Listener;
import com.alibaba.excel.EasyExcel;
import com.alibaba.excel.exception.ExcelAnalysisException;
import java.io.IOException;
import com.alibaba.excel.exception.ExcelDataConvertException;
#end
#if(${enableOrigins})
import org.springframework.web.bind.annotation.CrossOrigin;
#end
#if(${requestBody})
import org.springframework.web.bind.annotation.RequestBody;
#end
#if(${enableValidated})
import org.springframework.validation.annotation.Validated;
#end
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import ${basePackage}.${dtoPackage}.${entity}InsertDto;
import ${basePackage}.${dtoPackage}.${entity}UpdateDto;
#if(${returnResultClass})
import ${returnResultClassPackage};
#end
#if(${springdoc})
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.*;
#elseif(${swagger})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiModelProperty;
#end
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
#if(${pageByDto})
import java.util.List;
import com.baomidou.mybatisplus.core.metadata.IPage;
import ${basePackage}.${dtoPackage}.${entity}SelectDto;
import ${basePackage}.${voPackage}.${entity}Vo;
#end

import java.io.Serializable;


/**
 * $!{table.comment}
 *
 * @author ${author}
 * @since ${date}
 */
#if(${springdoc})
@Tag(name = "${table.comment}", description = "$!{table.comment}")
#elseif(${swagger})
@Api(value = "#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end", tags = "$!{table.comment}")
#end
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
#if(${enableOrigins})
@CrossOrigin
#end
@RequestMapping("#if(${baseUrl})${baseUrl}#end#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    private ${table.serviceName} baseService;

    #if(${springdoc})
    @Operation(summary = "新增")
    #elseif(${swagger})
    @ApiOperation(value = "新增")
    #else
    /**
     * 新增
     * @author ${author}
     * @since ${nowTime}
     * @param dto 新增入参对象
     * @return
     */
    #end
    @PostMapping("/insert")
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<${entity}>#end insert(#if(${requestBody})@RequestBody #end#if(${enableValidated})@Validated #end${entity}InsertDto dto){
    #else
    public Object insert(#if(${requestBody})@RequestBody #end#if(${addValidated})@Validated #end ${entity}InsertDto dto){
    #end
        ${entity} result = baseService.insertByDto(dto);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }

    #if(${springdoc})
    @Operation(summary = "修改")
    #elseif(${swagger})
    @ApiOperation(value = "修改")
    #else
    /**
     * 修改
     * @author ${author}
     * @since ${nowTime}
     * @param dto 修改入参对象
     * @return #if(${returnResultClass})${returnResultClass}#else Object#end
     */
    #end
    #if(${allPost})
    @PostMapping("/update")
    #else
    @PutMapping("/update")
    #end
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<Boolean>#end update(#if(${requestBody})@RequestBody #end#if(${enableValidated})@Validated #end${entity}UpdateDto dto){
    #else
    public Object update(#if(${requestBody})@RequestBody #end#if(${addValidated})@Validated #end ${entity}UpdateDto dto){
    #end
        Boolean result = baseService.updateByDto(dto);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }

    #if(${springdoc})
    @Operation(summary = "删除")
    #elseif(${swagger})
    @ApiOperation(value = "删除")
    #else
    /**
     * 删除
     * @author ${author}
     * @since ${nowTime}
     * @param id 主键ID|1
     * @return #if(${returnResultClass})${returnResultClass}#else Object#end
     */
    #end
    #if(${allPost})
    @PostMapping("/delete/{id}")
    #else
    @DeleteMapping("/delete/{id}")
    #end
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<Boolean>#end delete(@PathVariable Serializable id) {
    #else
    public Object delete(@PathVariable Serializable id) {
    #end
        Boolean result = baseService.removeById(id);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }

    #if(${pageByDto})
    #if(${springdoc})
    @Operation(summary = "根据id查询详情")
    #elseif(${swagger})
    @ApiOperation(value = "根据id查询详情")
    #else
    /**
     * 根据id查询详情
     * @author ${author}
     * @since ${nowTime}
     * @param id 主键id
     * @return #if(${returnResultClass})${returnResultClass}#else Object#end
     */
    #end
    #if(${allPost})
    @PostMapping("/get/{id}")
    #else
    @GetMapping("/get/{id}")
    #end
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<${entity}Vo>#end get(@PathVariable Serializable id){
    #else
    public Object get(@PathVariable Serializable id){
    #end
        ${entity}Vo result=baseService.getVoById(id);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }

    #if(${springdoc})
    @Operation(summary = "列表")
    #elseif(${swagger})
    @ApiOperation(value = "列表")
    #else
    /**
     * 列表
     * @author ${author}
     * @since ${nowTime}
     * @param dto 查询条件dto
     * @return #if(${returnResultClass})${returnResultClass}#else Object#end
     */
    #end
    #if(${allPost})
    @PostMapping("/list")
    #else
    @GetMapping("/list")
    #end
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<List<${entity}Vo>>#end list(#if(${requestBody})@RequestBody(required = false) #end${entity}SelectDto dto){
    #else
    public Object list(#if(${requestBody})@RequestBody(required = false) #end${entity}SelectDto dto){
    #end
        List<${entity}Vo> result=baseService.listByDto(dto);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }

    #if(${springdoc})
    @Operation(summary = "分页查询")
    #elseif(${swagger})
    @ApiOperation(value = "分页查询")
    #else
    /**
     * 分页查询
     * @author ${author}
     * @since ${nowTime}
     * @param dto 查询条件dto
     * @return #if(${returnResultClass})${returnResultClass}#else Object#end
     */
    #end
    #if(${allPost})
    @PostMapping("/page")
    #else
    @GetMapping("/page")
    #end
##    @PostMapping("/page/{current}/{size}")
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<IPage<${entity}Vo>>#end page(#if(${requestBody})@RequestBody(required = false) #end${entity}SelectDto dto){
##    public ${returnResultClass}#if(${returnResultGenericType})<IPage<${entity}Vo>>#end page(#if(${requestBody})@RequestBody(required = false) #end${entity}SelectDto dto, @PathVariable Long current, @PathVariable Long size){
    #else
    public Object page(#if(${requestBody})@RequestBody(required = false) #end${entity}SelectDto dto){
    #end
##        IPage<${entity}Vo> result=baseService.pageByDto(dto,current,size);
        IPage<${entity}Vo> result=baseService.pageByDto(dto);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }

    #if(${exportExcel})
    #if(${springdoc})
    @Operation(summary = "导出excel")
    #elseif(${swagger})
    @ApiOperation(value = "导出excel")
    #else
    /**
     * 导出excel
     * @author ${author}
     * @since ${nowTime}
     * @param dto 查询条件dto
     */
    #end
    #if(${allPost})
    @PostMapping("/export")
    #else
    @GetMapping("/export")
    #end
    public void export(#if(${requestBody})@RequestBody(required = false) #end${entity}SelectDto dto){
        baseService.exportExcel(dto);
    }
    #end
    #end

    #if(${importExcel})
    #if(${springdoc})
    @Operation(summary = "导入excel")
    #elseif(${swagger})
    @ApiOperation(value = "导入excel")
    #else
    /**
     * 导入excel
     * @author ${author}
     * @since ${nowTime}
     * @param excel excel文件
     * @return #if(${returnResultClass})${returnResultClass}#else Object#end
     */
    #end
    @PostMapping("/import")
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<Boolean>#end importFromExcel(@RequestParam("excel") MultipartFile excel) {
    #else
    public Object importFromExcel(@RequestParam("excel") MultipartFile excel) {
    #end
        if (excel==null || excel.isEmpty()){
        #if(${returnResultClass})
            return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(false)#else null#end;
        #else
            return false;
        #end
        }
        ${entity}Listener listener = new ${entity}Listener(this.baseService);
        try {
            // 解析
            EasyExcel.read(excel.getInputStream(), ${entity}ImportVo.class, listener).sheet().doRead();
        } catch (ExcelAnalysisException | IOException e) {
            e.printStackTrace();
            if (e.getCause() instanceof ExcelDataConvertException) {
                ExcelDataConvertException excelDataConvertException = (ExcelDataConvertException) e.getCause();
                String msg= String.format("第%s行，第%s列数据格式不正确：%s",excelDataConvertException.getRowIndex() + 1,excelDataConvertException.getColumnIndex() + 1,excelDataConvertException.getCellData());
                throw new RuntimeException(msg);
            }
        }
        Boolean result = listener.isSuccess();
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }
    #end



}
#end
