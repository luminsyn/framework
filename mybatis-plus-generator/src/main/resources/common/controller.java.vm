package ${package.Controller};

#if(${generateSelect}&&!${pageResultClass})
import com.baomidou.mybatisplus.core.metadata.IPage;
#end
#if(${returnResultClass})
import ${returnResultClassPackage}.${returnResultClass};
#end
import ${package.Service}.${table.serviceName};
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
#if(${generateSelect}&&${pageResultClass})
import ${pageResultClassPackage}.${pageResultClass};
#end
#if(${generateSelect}||(${generateExport}&&${exportOnVO})||(${generateImport}&&${importOnVO}))
import ${basePackage}.${VOPackage}.${entity}VO;
#end
#if(${generateSelect})
    #if(${splicer})
import ${splicerClassFullName};
    #else
import ${basePackage}.${DTOPackage}.${entity}SelectDTO;
    #end
#end
#if(${generateInsert})
import ${basePackage}.${DTOPackage}.${entity}InsertDTO;
#end
#if(${generateUpdate})
import ${basePackage}.${DTOPackage}.${entity}UpdateDTO;
#end
#if(${generateImport}&&!${importOnVO})
import ${basePackage}.${DTOPackage}.${entity}ImportDTO;
#end
#if(${generateExport}&&!${exportOnVO})
import ${basePackage}.${DTOPackage}.${entity}ExportDTO;
#end
#if(${springdoc})
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.*;
#elseif(${swagger})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
#end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
#if(${enableValidated} && (${generateInsert}||${generateUpdate}))
import org.springframework.validation.annotation.Validated;
#end
#if(${generateImport})
import org.springframework.web.multipart.MultipartFile;
#end

#if(${generateImport}||${generateExport})
import ${javaApiPackage}.servlet.http.HttpServletResponse;
#end
#if(${generateImport}||${generateExport})
import java.io.IOException;
#end
#if(${generateSelect}||${generateDelete})
import java.io.Serializable;
#end
#if(${generateSelect})
import java.util.List;
#end

/**
 * $!{table.comment}
 *
 * @author ${author}
 * @see ${package.Entity}.${entity}
 * @see ${basePackage}.${VOPackage}.${entity}VO
 * @see ${package.Mapper}.${table.mapperName}
 * @see ${package.ServiceImpl}.${table.serviceImplName}
 */
#if(${springdoc})
@Tag(name = "${table.comment}", description = "$!{table.comment}")
    #elseif(${swagger})
@Api(value = "#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end", tags = "$!{table.comment}")
#end
#if(${restControllerStyle})
@RestController
    #else
@Controller
#end
#if(${enableOrigins})
@CrossOrigin
#end
@RequestMapping("#if(${baseUrl})${baseUrl}#end#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end
    #else
        #if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
        #else
public class ${table.controllerName} {
    #end
#end

    @Autowired
    private ${table.serviceName} baseService;

#if(${generateInsert})
    #if(${springdoc})
    @Operation(summary = "新增")
        #elseif(${swagger})
    @ApiOperation(value = "新增")
    #else
    /**
     * 新增
     *
     * @param s 新增入参对象
     * @return #if(${returnResultClass})${returnResultClass}#else ${entity}VO#end
     * @author ${author}
     */
    #end
    #if(${restful})
    @PostMapping("")
        #else
    @PostMapping("/insert")
    #end
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<${entity}VO>#end insert(#if(${requestBody})@RequestBody #end#if(${enableValidated})@Validated #end${entity}InsertDTO s) {
        #else
    public ${entity}VO insert(#if(${requestBody})@RequestBody #end#if(${enableValidated})@Validated #end${entity}InsertDTO s) {
    #end
    #if(${returnResultClass})
        return ${returnResultMethodName}(baseService.insertByDTO(s));
        #else
        return baseService.insertByDTO(s);
    #end
    }
#end
#if(${generateUpdate})

    #if(${springdoc})
    @Operation(summary = "修改")
        #elseif(${swagger})
    @ApiOperation(value = "修改")
        #else
    /**
     * 修改
     *
     * @param s 修改入参对象
     * @return#if(${returnResultClass}) ${returnResultClass}#else Boolean#end
     * @author ${author}
     */
    #end
    #if(${restful})
    @PutMapping("")
        #else
    @PostMapping("/update")
    #end
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<Boolean>#end update(#if(${requestBody})@RequestBody #end#if(${enableValidated})@Validated #end${entity}UpdateDTO s) {
        #else
    public Boolean update(#if(${requestBody})@RequestBody #end#if(${enableValidated})@Validated #end${entity}UpdateDTO s) {
    #end
    #if(${returnResultClass})
        return ${returnResultMethodName}(baseService.updateByDTO(s));
        #else
        return baseService.updateByDTO(s);
    #end
    }
#end
#if(${generateDelete})

    #if(${springdoc})
    @Operation(summary = "删除")
        #elseif(${swagger})
    @ApiOperation(value = "删除")
        #else
    /**
     * 删除
     *
     * @param id 主键id
     * @return #if(${returnResultClass})${returnResultClass}#else Boolean#end
     * @author ${author}
     */
    #end
    #if(${restful})
    @DeleteMapping("/{id}")
        #else
    @PostMapping("/delete/{id}")
    #end
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<Boolean>#end deleteById(@PathVariable("id") Serializable id) {
        #else
    public Boolean deleteById(@PathVariable("id") Serializable id) {
    #end
    #if(${returnResultClass})
        return ${returnResultMethodName}(baseService.removeById(id));
    #else
        return baseService.removeById(id);
    #end
    }
#end
#if(${generateSelect})

    #if(${springdoc})
    @Operation(summary = "根据id查询详情")
        #elseif(${swagger})
    @ApiOperation(value = "根据id查询详情")
        #else
    /**
     * 根据id查询详情
     *
     * @param id 主键id
     * @return #if(${returnResultClass})${returnResultClass}#else ${entity}VO#end
     * @author ${author}
     */
    #end
    #if(${restful})
    @GetMapping("/{id}")
        #else
    @GetMapping("/select/{id}")
    #end
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<${entity}VO>#end selectById(@PathVariable("id") Serializable id) {
        #else
    public ${entity}VO selectById(@PathVariable("id") Serializable id) {
    #end
    #if(${returnResultClass})
        return ${returnResultMethodName}(baseService.voById(id));
        #else
        return baseService.voById(id);
    #end
    }
    #if(${splicer})

    #if(${springdoc})
    @Operation(summary = "复杂查询可用字段列表")
    #elseif(${swagger})
    @ApiOperation(value = "复杂查询可用字段列表")
    #else
    /**
     * 复杂查询可用字段列表
     *
     * @return #if(${returnResultClass})${returnResultClass}#else List<String>#end
     * @author ${author}
     */
    #end
    @GetMapping("/fields")
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<List<String>>#end selectableFields() {
    #else
    public List<String> selectableFields() {
    #end
    #if(${returnResultClass})
        return ${returnResultMethodName}(baseService.selectableFields());
    #else
        return baseService.selectableFields();
    #end
    }
    #end

    #if(${springdoc})
    @Operation(summary = "列表")
        #elseif(${swagger})
    @ApiOperation(value = "列表")
        #else
    /**
     * 列表
     *
     * @param s 查询条件
     * @return #if(${returnResultClass})${returnResultClass}#else ${entity}VO#end
     * @author ${author}
     */
    #end
    #if(${postOnComplicatedSelect})
    @PostMapping("/list")
        #else
    @GetMapping("/list")
    #end
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<List<${entity}VO>>#end selectList(#if(${requestBody})@RequestBody(required = false) #end#if(${splicer})${splicerClassSimpleName}#else${entity}SelectDTO#end s) {
    #else
    public List<${entity}VO> selectList(#if(${requestBody})@RequestBody(required = false) #end#if(${splicer})${splicerClassSimpleName}#else${entity}SelectDTO#end s) {
    #end
    #if(${returnResultClass})
        return ${returnResultMethodName}(baseService.listByDTO(s));
    #else
        return baseService.listByDTO(s);
    #end
    }

    #if(${springdoc})
    @Operation(summary = "分页查询")
        #elseif(${swagger})
    @ApiOperation(value = "分页查询")
        #else
    /**
     * 分页查询(页码与大小均不传时采用默认值)
     *
     * @param current 页码(默认1)
     * @param size 每页大小(默认10,-1为不限制)
     * @param s 查询条件
     * @return #if(${returnResultClass})${returnResultClass}#else ${entity}VO#end
     * @author ${author}
     */
    #end
    #if(${postOnComplicatedSelect})
    @PostMapping({"/page", "/page/{current}", "/page/{current}/{size}"})
        #else
    @GetMapping({"/page", "/page/{current}", "/page/{current}/{size}"})
    #end
    #if(${returnResultClass})
            #if(${pageResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<${pageResultClass}#if(${returnResultGenericType})<${entity}VO>#end>#end page(#if(${requestBody})@RequestBody(required = false) #end#if(${splicer})${splicerClassSimpleName}#else${entity}SelectDTO#end s, @PathVariable(value = "current", required = false) Long current, @PathVariable(value = "size", required = false) Long size) {
                #else
    public ${returnResultClass}#if(${returnResultGenericType})<IPage<${entity}VO>>#end page(#if(${requestBody})@RequestBody(required = false) #end#if(${splicer})${splicerClassSimpleName}#else${entity}SelectDTO#end s, @PathVariable(value = "current", required = false) Long current, @PathVariable(value = "size", required = false) Long size) {
            #end
        #else
            #if(${pageResultClass})
    public ${pageResultClass}#if(${pageResultGenericType})<${entity}VO>#end selectPage(#if(${requestBody})@RequestBody(required = false) #end#if(${splicer})${splicerClassSimpleName}#else${entity}SelectDTO#end s, @PathVariable(value = "current", required = false) Long current, @PathVariable(value = "size", required = false) Long size) {
                #else
    public IPage<${entity}VO> selectPage(#if(${requestBody})@RequestBody(required = false) #end#if(${splicer})${splicerClassSimpleName}#else${entity}SelectDTO#end s, @PathVariable(value = "current", required = false) Long current, @PathVariable(value = "size", required = false) Long size) {
            #end
    #end
    #if(${returnResultClass})
        #if(${pageResultClass})
        return ${returnResultMethodName}(${pageResultMethodName}(baseService.pageByDTO(s, current, size)));
            #else
        return ${returnResultMethodName}(baseService.pageByDTO(s, current, size));
        #end
    #else
        #if(${pageResultClass})
        return ${pageResultMethodName}(baseService.pageByDTO(s, current, size));
            #else
        return baseService.pageByDTO(s, current, size);
        #end
    #end
    }
    #if(${generateExport})

    #if(${springdoc})
    @Operation(summary = "导出excel")
    #elseif(${swagger})
    @ApiOperation(value = "导出excel")
    #else
    /**
     * 导出excel(页码与大小均不传时导出全部)
     *
     * @param current 页码(默认1)
     * @param size 每页大小(默认10)
     * @param s 查询条件
     * @author ${author}
     */
    #end
    #if(${postOnComplicatedSelect})
    @PostMapping({"/export", "/export/{current}", "/export/{current}/{size}"})
    #else
    @GetMapping({"/export", "/export/{current}", "/export/{current}/{size}"})
    #end
    public void exportExcel(#if(${requestBody})@RequestBody(required = false) #end#if(${splicer})${splicerClassSimpleName}#else${entity}SelectDTO#end s, @PathVariable(value = "current", required = false) Long current, @PathVariable(value = "size", required = false) Long size, HttpServletResponse response) throws IOException {
        response.setHeader("Content-disposition", "attachment;filename=" + System.currentTimeMillis() + ".xlsx");
        response.setContentType("application/vnd.ms-excel");
        baseService.exportExcel(s, response.getOutputStream(), #if(${exportOnVO})${entity}VO#else${entity}ExportDTO#end.class, current, size);
    }
    #end
#end
#if(${generateImport})

    #if(${springdoc})
    @Operation(summary = "下载excel导入模板")
        #elseif(${swagger})
    @ApiOperation(value = "下载excel导入模板")
        #else
    /**
     * 下载excel导入模板
     *
     * @author ${author}
     */
    #end
    #if(${allPost})
    @PostMapping("/template")
        #else
    @GetMapping("/template")
    #end
    public void excelTemplate(HttpServletResponse response) throws IOException {
        response.setHeader("Content-disposition", "attachment;filename=" + System.currentTimeMillis() + ".xlsx");
        response.setContentType("application/vnd.ms-excel");
        baseService.excelTemplate(response.getOutputStream(), #if(${importOnVO})${entity}VO#else${entity}ImportDTO#end.class);
    }
    
    #if(${springdoc})
    @Operation(summary = "导入excel")
        #elseif(${swagger})
    @ApiOperation(value = "导入excel")
        #else
    /**
     * 导入excel
     *
     * @param file excel文件
     * @return #if(${returnResultClass})${returnResultClass}#else Boolean#end
     * @author ${author}
     */
    #end
    @PostMapping("/import")
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<Boolean>#end importExcel(@RequestParam("file") MultipartFile file) throws IOException {
        #else
    public Boolean importExcel(@RequestParam("file") MultipartFile file) throws IOException {
    #end
        if (file == null || file.isEmpty()) {
        #if(${returnResultClass})
            return ${returnResultMethodName}(false);
        #else
            return false;
        #end
        }
    #if(${returnResultClass})
        return ${returnResultMethodName}(baseService.importExcel(file.getInputStream(), #if(${importOnVO})${entity}VO#else${entity}ImportDTO#end.class));
    #else
        return baseService.importExcel(file.getInputStream(), #if(${importOnVO})${entity}VO#else${entity}ImportDTO#end.class);
    #end
    }
#end

}
