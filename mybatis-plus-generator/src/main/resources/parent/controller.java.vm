package ${package.Controller};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
#if(${enableOrigins})
import org.springframework.web.bind.annotation.CrossOrigin;
#end
#if(${requestBody})
import org.springframework.web.bind.annotation.RequestBody;
#end
#if(${enableValidated})
import org.springframework.validation.annotation.Validated;
#end
import ${package.Service}.${table.serviceName};
#if(${returnResultClass})
import ${returnResultClassPackage};
#end
#if(${springdoc})
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.*;
#elseif(${swagger})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiModelProperty;
#if(${requestBody})
import io.swagger.annotations.ApiImplicitParam;
#end
#end
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

import java.io.Serializable;
#if(${generateInsert})
import ${basePackage}.${dtoPackage}.${entity}InsertDto;
#end
#if(${generateUpdate})
import ${basePackage}.${dtoPackage}.${entity}UpdateDto;
#end
#if(${generateSelect})
import java.util.List;
import com.baomidou.mybatisplus.core.metadata.IPage;
import ${basePackage}.${dtoPackage}.${entity}SelectDto;
import ${basePackage}.${voPackage}.${entity}Vo;
#end
#if(${generateImport}||${generateExport})
import java.io.IOException;
#end
#if(${generateImport})
import org.springframework.web.multipart.MultipartFile;
import ${basePackage}.${dtoPackage}.${entity}ImportDto;
#end
#if(${generateExport})
import ${javaApiPackage}.servlet.http.HttpServletResponse;
import ${basePackage}.${dtoPackage}.${entity}ExportDto;
#end

/**
 * $!{table.comment}
 *
 * @author ${author}
 * @since ${date}
 */
#if(${springdoc})
@Tag(name = "${table.comment}", description = "$!{table.comment}")
#elseif(${swagger})
@Api(value = "#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end", tags = "$!{table.comment}")
#end
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
#if(${enableOrigins})
@CrossOrigin
#end
@RequestMapping("#if(${baseUrl})${baseUrl}#end#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    private ${table.serviceName} baseService;

#if(${generateInsert})
    #if(${springdoc})
    @Operation(summary = "新增")
    #elseif(${swagger})
    @ApiOperation(value = "新增")
    #if(${requestBody})
    @ApiImplicitParam(name = "dto",  paramType = "body")
    #end
    #else
    /**
     * 新增
     * @author ${author}
     * @since ${nowTime}
     * @param dto 新增入参对象
     * @return #if(${returnResultClass})${returnResultClass}#else Object#end
     */
    #end
    @PostMapping("/insert")
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<${entity}Vo>#end insert(#if(${requestBody})@RequestBody#if(${springdoc}) @io.swagger.v3.oas.annotations.parameters.RequestBody#end #end#if(${enableValidated})@Validated #end${entity}InsertDto dto){
    #else
    public Object insert(#if(${requestBody})@RequestBody#if(${springdoc}) @io.swagger.v3.oas.annotations.parameters.RequestBody#end #end#if(${addValidated})@Validated #end ${entity}InsertDto dto){
    #end
        ${entity}Vo result = baseService.insertByDto(dto);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }

    #if(${springdoc})
    @Operation(summary = "批量新增")
    #elseif(${swagger})
    @ApiOperation(value = "批量新增")
    #if(${requestBody})
    @ApiImplicitParam(name = "dtoList",  paramType = "body")
    #end
    #else
    /**
     * 批量新增
     * @author ${author}
     * @since ${nowTime}
     * @param dtoList 新增入参对象列表
     * @return #if(${returnResultClass})${returnResultClass}#else Object#end
     */
    #end
    @PostMapping("/insertBatch")
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<Boolean>#end insertBatch(#if(${requestBody})@RequestBody#if(${springdoc}) @io.swagger.v3.oas.annotations.parameters.RequestBody#end #end#if(${enableValidated})@Validated #end List<${entity}InsertDto> dtoList){
    #else
    public Object insert(#if(${requestBody})@RequestBody#if(${springdoc}) @io.swagger.v3.oas.annotations.parameters.RequestBody#end #end#if(${addValidated})@Validated #end List<${entity}InsertDto> dtoList){
    #end
        Boolean result = baseService.insertBatchByDto(dtoList);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }
#end
#if(${generateUpdate})

    #if(${springdoc})
    @Operation(summary = "修改")
    #elseif(${swagger})
    @ApiOperation(value = "修改")
    #if(${requestBody})
    @ApiImplicitParam(name = "dto",  paramType = "body")
    #end
    #else
    /**
     * 修改
     * @author ${author}
     * @since ${nowTime}
     * @param dto 修改入参对象
     * @return #if(${returnResultClass})${returnResultClass}#else Object#end
     */
    #end
    #if(${allPost})
    @PostMapping("/update")
    #else
    @PutMapping("/update")
    #end
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<Boolean>#end update(#if(${requestBody})@RequestBody#if(${springdoc}) @io.swagger.v3.oas.annotations.parameters.RequestBody#end #end#if(${enableValidated})@Validated #end${entity}UpdateDto dto){
    #else
    public Object update(#if(${requestBody})@RequestBody#if(${springdoc}) @io.swagger.v3.oas.annotations.parameters.RequestBody#end #end#if(${addValidated})@Validated #end ${entity}UpdateDto dto){
    #end
        Boolean result = baseService.updateByDto(dto);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }
#end

    #if(${springdoc})
    @Operation(summary = "删除")
    #elseif(${swagger})
    @ApiOperation(value = "删除")
    #else
    /**
     * 删除
     * @author ${author}
     * @since ${nowTime}
     * @param id 主键ID|1
     * @return #if(${returnResultClass})${returnResultClass}#else Object#end
     */
    #end
    #if(${allPost})
    @PostMapping("/delete/{id}")
    #else
    @DeleteMapping("/delete/{id}")
    #end
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<Boolean>#end delete(@PathVariable Serializable id) {
    #else
    public Object delete(@PathVariable Serializable id) {
    #end
        Boolean result = baseService.removeById(id);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }
#if(${generateSelect})

    #if(${springdoc})
    @Operation(summary = "根据id查询详情")
    #elseif(${swagger})
    @ApiOperation(value = "根据id查询详情")
    #else
    /**
     * 根据id查询详情
     * @author ${author}
     * @since ${nowTime}
     * @param id 主键id
     * @return #if(${returnResultClass})${returnResultClass}#else Object#end
     */
    #end
    #if(${allPost})
    @PostMapping("/get/{id}")
    #else
    @GetMapping("/get/{id}")
    #end
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<${entity}Vo>#end get(@PathVariable Serializable id){
    #else
    public Object get(@PathVariable Serializable id){
    #end
        ${entity}Vo result=baseService.getVoById(id);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }

    #if(${springdoc})
    @Operation(summary = "列表")
    #elseif(${swagger})
    @ApiOperation(value = "列表")
    #if(${requestBody})
    @ApiImplicitParam(name = "dto",  paramType = "body")
    #end
    #else
    /**
     * 列表
     * @author ${author}
     * @since ${nowTime}
     * @param dto 查询条件dto
     * @return #if(${returnResultClass})${returnResultClass}#else Object#end
     */
    #end
    #if(${allPost})
    @PostMapping("/list")
    #else
    @GetMapping("/list")
    #end
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<List<${entity}Vo>>#end list(#if(${requestBody})@RequestBody(required = false)#if(${springdoc}) @io.swagger.v3.oas.annotations.parameters.RequestBody#end #end${entity}SelectDto dto){
    #else
    public Object list(#if(${requestBody})@RequestBody#if(${springdoc}) @io.swagger.v3.oas.annotations.parameters.RequestBody#end #end${entity}SelectDto dto){
    #end
        List<${entity}Vo> result=baseService.listByDto(dto);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }

    #if(${springdoc})
    @Operation(summary = "分页查询")
    #elseif(${swagger})
    @ApiOperation(value = "分页查询")
    #if(${requestBody})
    @ApiImplicitParam(name = "dto",  paramType = "body")
    #end
    #else
    /**
     * 分页查询
     * @author ${author}
     * @since ${nowTime}
     * @param current 页码
     * @param size 每页大小
     * @param dto 查询条件dto
     * @return #if(${returnResultClass})${returnResultClass}#else Object#end
     */
    #end
    #if(${allPost})
    @PostMapping("/page/{current}/{size}")
    #else
    @GetMapping("/page/{current}/{size}")
    #end
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<IPage<${entity}Vo>>#end page(#if(${requestBody})@RequestBody(required = false)#if(${springdoc}) @io.swagger.v3.oas.annotations.parameters.RequestBody#end #end${entity}SelectDto dto, @PathVariable Long current, @PathVariable Long size){
    #else
    public Object page(#if(${requestBody})@RequestBody#if(${springdoc}) @io.swagger.v3.oas.annotations.parameters.RequestBody#end #end${entity}SelectDto dto,@PathVariable Long current, @PathVariable Long size){
    #end
        IPage<${entity}Vo> result=baseService.pageByDto(dto,current,size);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }
#end

#if(${generateExport}&&${generateSelect})
    #if(${springdoc})
    @Operation(summary = "导出excel")
    #elseif(${swagger})
    @ApiOperation(value = "导出excel")
    #if(${requestBody})
    @ApiImplicitParam(name = "dto",  paramType = "body")
    #end
    #else
    /**
     * 导出excel
     * @author ${author}
     * @since ${nowTime}
     * @param dto 查询条件dto
     */
    #end
    #if(${allPost})
    @PostMapping("/export")
    #else
    @GetMapping("/export")
    #end
    public void exportExcel(#if(${requestBody})@RequestBody(required = false)#if(${springdoc}) @io.swagger.v3.oas.annotations.parameters.RequestBody#end #end${entity}SelectDto dto, HttpServletResponse response) throws IOException {
        response.setContentType("application/vnd.ms-excel");
        response.setCharacterEncoding("utf-8");
        response.setHeader("Access-Control-Expose-Headers","Content-Disposition");
        response.setHeader("Content-disposition", "attachment;filename=" + System.currentTimeMillis()+".xlsx");
        response.addHeader("Pargam", "no-cache");
        response.addHeader("Cache-Control", "no-cache");
        baseService.exportExcel(dto,response.getOutputStream(), ${entity}ExportDto.class);
    }
#end

#if(${generateImport})
    #if(${springdoc})
    @Operation(summary = "导入excel")
    #elseif(${swagger})
    @ApiOperation(value = "导入excel")
    #else
    /**
     * 导入excel
     * @author ${author}
     * @since ${nowTime}
     * @param file excel文件
     * @return #if(${returnResultClass})${returnResultClass}#else Object#end
     */
    #end
    @PostMapping("/import")
    #if(${returnResultClass})
    public ${returnResultClass}#if(${returnResultGenericType})<Boolean>#end importExcel(MultipartFile file) throws IOException {
    #else
    public Object importFromExcel(MultipartFile file) throws IOException {
    #end
        if (file==null || file.isEmpty()){
        #if(${returnResultClass})
            return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(false)#else null#end;
        #else
            return false;
        #end
        }
        Boolean result = baseService.importExcel(file.getInputStream(), ${entity}ImportDto.class);
    #if(${returnResultClass})
        return#if(${returnResultDefaultStaticMethodName}) ${returnResultClass}.${returnResultDefaultStaticMethodName}(result)#else null#end;
    #else
        return result;
    #end
    }
#end

}
#end
